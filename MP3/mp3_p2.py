# -*- coding: utf-8 -*-
"""MP3-P2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ai5PrbHVgMfg5vQkMDTTH8WlBmS2-6GK
"""

import numpy as np
import cv2
import math
import matplotlib.pyplot as plt

def compute_gaussian_params(image_paths):
    hue_vals = []
    sat_vals = []

    for path in image_paths:
        img = cv2.imread(path)
        if img is None:
            print(f"Could not load image: {path}")
            continue
        img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
        h, s, _ = cv2.split(img_hsv)

        hue_vals.extend(h.flatten())
        sat_vals.extend(s.flatten())

    hue_vals = np.array(hue_vals, dtype=np.float64)
    sat_vals = np.array(sat_vals, dtype=np.float64)

    mu_h = hue_vals.mean()
    mu_s = sat_vals.mean()
    mu = np.array([mu_h, mu_s])

    var_h = ((hue_vals - mu_h) ** 2).mean()
    var_s = ((sat_vals - mu_s) ** 2).mean()
    cov_hs = ((hue_vals - mu_h) * (sat_vals - mu_s)).mean()
    cov_matrix = np.array([[var_h, cov_hs], [cov_hs, var_s]])

    return mu, cov_matrix

def gaussian_probability(x, mu, cov_matrix):
    d = len(mu)
    diff = x - mu
    exponent = -0.5 * np.dot(diff.T, np.linalg.solve(cov_matrix, diff))
    denominator = math.sqrt((2 * math.pi) ** d * np.linalg.det(cov_matrix))
    return math.exp(exponent) / denominator

def calculate_skin_probability(img, mu, cov_matrix, threshold):
    img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    height, width, _ = img_hsv.shape
    mask = np.zeros((height, width), dtype=np.uint8)

    for i in range(height):
        for j in range(width):
            h, s, _ = img_hsv[i, j]
            x = np.array([h, s])
            prob = gaussian_probability(x, mu, cov_matrix)
            if prob > threshold:
                mask[i, j] = 1

    return mask

skin_patch_paths = [
    "train/s14.jpg", "train/s13.jpg", "train/s12.jpg", "train/s11.jpg",
    "train/s9.webp", "train/s8.webp", "train/s7.webp", "train/s6.webp",
    "train/s5.jpeg", "train/s4.webp", "train/s3.jpg", "train/s2.webp",
    "train/s1.webp", "train/s10.jpg",
]

mu, cov_matrix = compute_gaussian_params(skin_patch_paths)

print("Mean vector (mu):\n", mu)
print("Covariance matrix (cov_matrix):\n", cov_matrix)

img_test = cv2.imread("testing_image.bmp")
threshold = 0.000065
mask = calculate_skin_probability(img_test, mu, cov_matrix, threshold)
img_seg = img_test * mask[:, :, np.newaxis]

plt.figure(figsize=(10,10))
plt.subplot(1, 3, 1)
plt.title("Input")
plt.imshow(cv2.cvtColor(img_test, cv2.COLOR_BGR2RGB))
plt.axis('off')

plt.subplot(1, 3, 2)
plt.title("Mask")
plt.imshow(mask, cmap='gray')
plt.axis('off')

plt.subplot(1, 3, 3)
plt.title("Segmentation")
plt.imshow(cv2.cvtColor(img_seg.astype(np.uint8), cv2.COLOR_BGR2RGB))
plt.axis('off')

plt.show()